{
  "home": "主页",
  "about": "关于",
  "contact": "联系方式",
  "projects": "项目",
  "name": "王靖涵",
  "morning": "早上好，",
  "afternoon": "下午好，",
  "evening": "晚上好，",
  "video": "视频",
  "welcome": "欢迎来到我的个人网站",
  "aboutme": "关于我",
  "website": "网页",
  "friend": "友情链接",
  "portfolios": "作品集",
  "paper": "论文",
  "source": "源代码",
  "jumpTitle": "服务器响应可能存在延迟",
  "jumpContent": "网站从服务器接收响应时可能存在轻微的延迟。因此，如果点击按钮后没有立即反应，请耐心等待一会儿～",
  "jumpButton": "我明白",
  "jumpDismiss": "不再显示",
  "wtgit": "想要联系我吗？",
  "ctmt": "通过这些方式联系我...",
  "jumpGithub": "点击跳转到我的 Github 页面",
  "copyEmail": "点击复制微信号到剪贴板",
  "copyEmailSuccess": "已复制微信号到剪贴板！",
  "copyWechat": "点击复制电子邮箱地址到剪贴板",
  "copyWechatSuccess": "已复制电子邮箱地址到剪贴板！",
  "leaveMessage": "或者在这里给我留言...",
  "preferredName": "您的昵称",
  "email": "您的电子邮箱",
  "content": "内容",
  "messageSuccess": "消息发送成功",
  "send": "发送",
  "showMore": "展开更多",
  "showLess": "收起",
  "tipWebsite": "点击跳转到网站",
  "tipSource": "点击跳转到源代码",
  "tipPaper": "点击查看论文",
  "tipVideo": "点击查看视频",
  "project": [
    {
      "logo": "react.svg",
      "type": "React",
      "title": "My Airbnb",
      "description": "类似于 #:aAirbnb[https://www.airbnb.com.au/]# 的房屋交易Web应用。",
      "content": [
        {
          "type": "title",
          "content": "功能描述："
        },
        {
          "type": "text",
          "content": "项目旨在为房东和租房者提供一个便捷的中间平台，允许使房东能够公开他们的房屋信息，而租房者则可以方便地浏览、查询和预订这些房源。具体来说，该应用支持以下功能："
        },
        {
          "type": "list",
          "content": [
            "用户注册与登录",
            "上传房屋图片和信息",
            "搜索与筛选功能",
            "在线预订功能"
          ]
        },
        {
          "type": "title",
          "content": "技术实现："
        },
        {
          "type": "text",
          "content": "这个项目是我使用 React 框架完成的第一个大型作业。我采用了 TypeScript 来确保代码的高质量和可维护性。在路由管理方面，我使用了 React Router 的 `BrowserRouter` 组件，创建了一个动态和响应式的单页面应用（SPA）。由于全局状态的需求并不多，我选择了 React 的 Context API 而非 Redux 来进行状态管理，这样既满足了应用需求，又保持了架构的简洁性。"
        },
        {
          "type": "text",
          "content": "在界面设计方面，我采用了 Material UI（MUI）作为主要的 UI 框架，这不仅加快了开发速度，而且保证了应用界面的现代感和响应性。"
        },
        {
          "type": "text",
          "content": "为了保证代码的稳定性和质量，我按照作业要求，利用 Jest 对三个关键组件进行了单元测试。此外，我还使用了 Cypress 进行了端到端的 UI 测试，确保了应用的整体稳定性和用户体验。"
        },
        {
          "type": "text",
          "content": "总体而言，这个项目提高了我的前端开发技能，特别是在使用 React 和相关技术栈方面，较为不足的是，对于 React 框架的使用，由于不同组件间存在大量的数据交互，为了避免过多的全局变量，我在项目中采取了将多个组件紧密耦合的策略。这种方法在一定程度上避免了全局状态的复杂管理，但降低了代码的可重用性，限制了测试的便利性。在未来的项目中，需要采用更精细的组件划分，减少组件间的耦合，以增强代码的可维护性、可测试性和扩展性。"
        }
      ],
      "link": "https://enmmmmovo.github.io/Airbnb/",
      "repo": "https://github.com/EnmmmmOvO/Airbnb",
      "imageSize": 60,
      "image": [
        "airbnb/logo.svg",
        "airbnb/1.png",
        "airbnb/2.png",
        "airbnb/3.png",
        "airbnb/4.png",
        "airbnb/5.png",
        "airbnb/6.png",
        "airbnb/7.png"
      ]
    },
    {
      "logo": "kaggle.png",
      "type": "神经网络",
      "title": "Stable Diffusion - Image to Prompts",
      "description": "根据输入的图片生成与图片内容相符的提示词。",
      "content": [
        {
          "type": "title",
          "content": "项目概念和模型选择"
        },
        {
          "type": "text",
          "content": "本项目灵感来源于 #:aKaggle[https://www.kaggle.com/competitions/stable-diffusion-image-to-prompts]# 竞赛。我们选择了两种不同的模型进行实现和比较分析：#:iCLIP# 模型和 #:iResnet + LSTM# 模型。目标是分别训练这两个模型，然后进行宏观层面的比较，以评估它们的优势和劣势。"
        },
        {
          "type": "title",
          "content": "模型训练与优化"
        },
        {
          "type": "text",
          "content": "每个模型都是基于其各自的预训练框架构建的。在训练过程中，我们使用了 #:iAdam# 优化器和学习率调度器，以促进模型的收敛并提高整体训练结果。对于两个模型，测试集和验证集都来自 #:aHugging Face[https://huggingface.co/datasets/poloclub/diffusiondb]# 的 #:iDiffusionDB# 数据集，并进行了适当的预处理。"
        },
        {
          "type": "title",
          "content": "我的贡献 - #:iResnet + LSTM# 模型"
        },
        {
          "type": "text",
          "content": "作为团队成员，我的责任是实现和训练 #:iResnet + LSTM# 模型。主要过程包括："
        },
        {
          "type": "list",
          "content": [
            "#:b特征提取#：使用 #:iResNet-50# 模型从输入图像中提取特征。",
            "#:b特征映射#：通过线性层将这些提取的特征映射到 #:iGPT-2# 模型的输入维度。",
            "#:b文本生成#：通过 #:iLSTM# 层处理这些特征，生成图像的初始文本描述。",
            "#:b文本精炼#：使用 #:iGPT-2# 模型来精炼初始描述，形成全面的最终图像描述。"
          ]
        },
        {
          "type": "text",
          "content": "我部分的整个训练程序都在 #:iKaggle# 的 #:iGPU-P100# 上进行。"
        },
        {
          "type": "title",
          "content": "训练结果及分析"
        },
        {
          "type": "text",
          "content": "经过大约7个训练周期后，#:iResnet + LSTM# 模型的损失指标趋于稳定，没有显示出进一步的改善。与 #:iCLIP# 模型相比，与实际原始提示词存在明显的差异。确定的潜在原因包括："
        },
        {
          "type": "list",
          "content": [
            "#:b模型架构#：项目需要处理图像和文本。使用 #:iCNN#（卷积神经网络）进行图像处理，使用 #:iRNN#（循环神经网络）进行文本处理。设计用于将 #:iCNN# 输出映射到 #:iRNN# 输入的互联层可能过于僵硬。这可能导致与 #:iCLIP# 中的 #:iViT# 模型相比，特征提取和集成效果不够有效，#:iViT# 模型在图像-文本对应方面表现出色。",
            "#:b参数优化和时间限制#：由于项目时间有限，可能导致某些模型参数的调整和优化不足。这可能是训练过程中实现有效收敛所面临的挑战之一。"
          ]
        }
      ],
      "repo": "https://github.com/GATA-Chen/COMP9417_Project",
      "paper": "documents/9417%20Report.pdf",
      "imageSize": 80,
      "image": [
        "imageToPrompt/logo.svg",
        "imageToPrompt/1.png",
        "imageToPrompt/2.png",
        "imageToPrompt/3.png",
        "imageToPrompt/4.png"
      ]
    },
    {
      "logo": "fastapi.svg",
      "type": "FastAPI + React",
      "title": "CONEX",
      "description": "连接专业人员与项目的Web平台",
      "content": [
        {
          "type": "title",
          "content": "项目概览"
        },
        {
          "type": "text",
          "content": "该项目是一个团队合作的全栈项目，旨在为公司和专业用户创建一个 Web 平台。对于专业用户而言，平台允许他们申请参加并对各个项目进行评价。对于公司用户，平台提供了创建和审批项目的功能。"
        },
        {
          "type": "title",
          "content": "前端和后端技术"
        },
        {
          "type": "text",
          "content": "在前端，我们选择了动态且用户友好的 #:iReact# 框架。后端使用 #:iFastAPI#、#:iSQLAlchemy# 和 #:iSQLite3# 开发，这些技术共同增强了数据库和后端操作之间的交互。"
        },
        {
          "type": "title",
          "content": "平台特性"
        },
        {
          "type": "list",
          "content": [
            "用户注册和登录。",
            "公司用户发布项目和申请筛选。",
            "专业用户的项目申请功能。",
            "用户之间的互评系统。"
          ]
        },
        {
          "type": "title",
          "content": "我在项目中的任务"
        },
        {
          "type": "list",
          "content": [
            "后端开发，重点是数据库的设计和实现。",
            "邮件功能的设计和部署。",
            "开发特定的前端页面，包括邮件中URL重定向的逻辑。"
          ]
        },
        {
          "type": "title",
          "content": "数据库设计和后端逻辑"
        },
        {
          "type": "text",
          "content": "数据库设计和基本后端逻辑在#:a这份文档[https://enmmmmovo.cloudns.be/documents/backgorund%20logic.pdf]#中有详细说明。我们在数据库交互中遵循了并发原则，使用会话进行并发控制和 #:iSQLAlchemy# 事务进行并发数据库管理。"
        },
        {
          "type": "title",
          "content": "邮件功能和前端实现"
        },
        {
          "type": "text",
          "content": "对于邮件组件，我们使用了 #:iPython# 的 #:iSMTP# 库来发送带有直接用户访问 #:iURL# 的电子邮件。在前端，我们使用了 #:iReact# 的路由器来管理 #:iURL# 重定向，使用户在登录后能够返回到之前的页面。"
        }
      ],
      "imageSize": 80,
      "image": [
        "conex/logo.svg",
        "conex/1.png",
        "conex/2.png",
        "conex/3.png",
        "conex/4.png",
        "conex/5.png",
        "conex/6.png",
        "conex/7.png",
        "conex/8.png",
        "conex/9.png",
        "conex/10.png",
        "conex/11.png",
        "conex/12.png"
      ]
    },
    {
      "logo": "js.svg",
      "type": "Vanilla JS",
      "title": "Slackr",
      "description": "支持信息与图片分享多功能的社交与通讯平台",
      "content": [
        {
          "type": "title",
          "content": "功能描述："
        },
        {
          "type": "text",
          "content": "这个项目是一个仿 #:aDiscord[https://discord.com/]# 的聊天应用，其图标源自 #:aSlack[https://slack.com/intl/en-gb/]# 并做了一些修改。它支持用户注册登录、创建和加入频道、发送文本和图片、编辑用户资料、频道邀请等功能。"
        },
        {
          "type": "title",
          "content": "技术栈："
        },
        {
          "type": "text",
          "content": "这个项目是一个纯 #:iHTML#、#:iCSS#、#:iJavaScript# 的前端项目，使用 #:iAJAX# 通过与后台 Web 服务器的数据交换来异步更新网页。项目采用 #:iVanilla JavaScript#，所有交互都作为 #:iJavaScript# 事件处理函数实现。#:iHTML# 中只包含一个基本的框架；具体的信息和功能由 #:iJavaScript# 向 #:iDOM# 动态添加。在 UI 方面，使用 #:iBootstrap 5# 作为基础框架，融入了它的组件，如模态框、吐司通知和导航栏，以增强美观。"
        },
        {
          "type": "title",
          "content": "局限性："
        },
        {
          "type": "text",
          "content": "作为我第一个前端项目，由于一开始缺乏全面的设计规划，导致与后端的交互有些混乱，后端是由他人提供。由于没有后端支持持续获取新消息，应用只能在打开任意一个频道时加载聊天数据，因此它不能像 #:aDiscord[https://discord.com/]# 或 #:aSlack[https://slack.com/intl/en-gb/]# 那样实时更新聊天信息。"
        },
        {
          "type": "text",
          "content": "UI 在一些区域使用了过大的字体，可能影响移动设备的美观。此外，照片展示可能没有考虑到图片超出边界的情况，可能导致图片显示不全的问题。"
        }
      ],
      "link": "https://enmmmmovo.github.io/Slackr/",
      "repo": "https://github.com/EnmmmmOvO/Slackr",
      "imageSize": 50,
      "image": [
        "slackr/logo.svg",
        "slackr/2.png",
        "slackr/1.png",
        "slackr/3.png",
        "slackr/4.png",
        "slackr/5.png",
        "slackr/6.png",
        "slackr/7.png"
      ]
    },
    {
      "logo": "network.svg",
      "type": "网络协议",
      "title": "Transport Application",
      "description": "基于udp与tcp协议的聊天室软件以及局域网传输工具",
      "content": [
        {
          "type": "title",
          "content": "项目1：#:a简单聊天室[https://github.com/EnmmmmOvO/UNSW-Computer-Science/tree/master/COMP3331/assign]#"
        },
        {
          "type": "text",
          "content": "该项目包括在终端环境内创建一个聊天室，具备功能如用户登录、聊天室创建、消息发送和查看、文件上传和下载。整个项目完全由#:iJava#开发，包含两个主要部分：#:b服务器端#和#:b客户端#。"
        },
        {
          "type": "text",
          "content": "两端之间的通信通过#:iUDP#（用户数据报协议）来实现，使用#:iJava DatagramSocket#。开发了一个自定义的Message类用于数据传输。服务器在收到请求后，处理并通过相同的#:iUDP#协议回应客户端。"
        },
        {
          "type": "text",
          "content": "对于文件传输部分，采用了#:iTCP#（传输控制协议）。传输前的必要条件通过两个端口确认。接收端通过#:iUDP#向发送端通报其端口号，之后发送端通过#:iTCP#协议将文件传输给接收端。"
        },
        {
          "type": "title",
          "content": "项目2：#:a局域网文件传输[https://github.com/EnmmmmOvO/Tool/tree/master/Transmission]#"
        },
        {
          "type": "text",
          "content": "该项目旨在实现#:iWindows PC#与#:iMac#之间在局域网（#:iLAN#）内的文件传输。在之前的项目基础上，对文件传输组件进行了增强，以支持#:iLAN#操作。"
        },
        {
          "type": "text",
          "content": "项目使用#:iJava Socket#编程，支持多文件及文件夹的传输。但它不支持中断传输的恢复。界面为非图形化，仅通过终端操作。文件传输需要提供接收方的#:iIP#地址和端口号，因为系统不支持自动发现#:iLAN#内的其他设备。"
        },
        {
          "type": "text",
          "content": "#:a计划[https://github.com/EnmmmmOvO/Tool/tree/master/trans]# 正在进行中，以重构此项目以支持多用户功能并加入图形用户界面。目标是实现#:iLAN#内设备的自动发现，并增加消息发送和中断传输恢复等功能。重构将使用#:iElectron#、#:iReact#和#:iNode.js#实现，旨在减少与多平台开发相关的工作量。"
        }
      ],
      "paper": "documents/chat%20platform%20report.pdf",
      "repo": "https://github.com/EnmmmmOvO/UNSW-Computer-Science/tree/master/COMP3331/assign",
      "imageSize": 80,
      "image": [
        "chat/logo.svg",
        "chat/1.png",
        "chat/2.png",
        "chat/3.png"
      ]
    },
    {
      "logo": "crawler.svg",
      "type": "网络爬虫",
      "title": "Web Scraper Application",
      "description": "这个是一系列为了方便我的学习或者生活所做的爬虫小工具",
      "content": [
        {
          "type": "title",
          "content": "项目一：立扣爬虫"
        },
        {
          "type": "text",
          "content": "该项目使用 #:iPython# 从指定的#:a立扣[https://leetcode.com/]#页面提取特定的题目描述。这个工具的主要目的是简化我编写立扣算法题的过程，消除重复复制代码的任务。爬虫从目标网页检索内容，定位 #:iC++# 类中的代码，并将其转换为带有 main 函数的代码文件。"
        },
        {
          "type": "title",
          "content": "项目二：PRTS 爬虫"
        },
        {
          "type": "text",
          "content": "在 #:iPython# 中实现的该工具，从 #:aPRTS[https://prts.wiki/]# 网页游戏中获取游戏 (#:a明日方舟[https://ak.hypergryph.com/]#) 内容信息。根据我输入的名字，它检索游戏角色数据，并提供关于他们发展的全面信息。这有助于规划和策略使用游戏中的角色。"
        },
        {
          "type": "title",
          "content": "项目三：#:aBbcollab 视频爬虫[https://github.com/EnmmmmOvO/Tool/tree/master/Bbcollab_video_Download]#"
        },
        {
          "type": "text",
          "content": "由于需要从没有下载选项且网站有重定向特性的 #:aBbcollab[https://eu.bbcollab.com/collab/ui/scheduler/]# 下载视频文件，这个工具使用 #:iPython Selenium# 来模拟进入。一旦重定向，它就会爬取视频的 #:iURL# 进行下载。这个工具用于从我大学的在线学习平台下载讲座视频。"
        },
        {
          "type": "title",
          "content": "项目四：#:a斗鱼爬虫[https://github.com/EnmmmmOvO/douyu_helper]#"
        },
        {
          "type": "text",
          "content": "我维护和更新了一个最初由其他人开发的爬虫项目。这个工具设计用于托管在 GitHub Actions 上，并在#:a斗鱼[https://www.douyu.com]#网站上每日执行一系列操作。"
        }

      ],
      "repo": "https://github.com/EnmmmmOvO/Tool/tree/master/Bbcollab_video_Download",
      "imageSize": 80,
      "image": [
        "crawler/logo.svg",
        "crawler/1.png",
        "crawler/2.png",
        "crawler/3.png",
        "crawler/4.png"
      ]
    },
    {
      "logo": "os.svg",
      "type": "操作系统",
      "title": "OS 161",
      "description": "该项目旨在在 #:aOS/161[http://os161.org/]# 操作系统中实现一些同步问题、虚拟文件系统和虚拟内存。",
      "content": [
        {
          "type": "title",
          "content": "#:a同步[https://github.com/EnmmmmOvO/UNSW-Computer-Science/tree/master/COMP3231/ass1]#"
        },
        {
          "type": "text",
          "content": "在第一部分中，在使用 #:iOS/161# 内核的软件环境中，通过尝试使用信号量和锁来实现生产者-消费者、哲学家就餐等问题，来解决一系列同步问题。"
        },
        {
          "type": "text",
          "content": "尽管同步问题本身与 #:iOS/161# 提供的服务只是间接相关，但它们解决了在编写操作系统代码时可能遇到的类似并发问题。"
        },
        {
          "type": "title",
          "content": "#:a系统调用和进程[https://github.com/EnmmmmOvO/UNSW-Computer-Science/tree/master/COMP3231/ass2]#"
        },
        {
          "type": "text",
          "content": "#:iVFS# 是一个关键组件，它抽象了文件系统操作，为不同的文件系统提供了统一的接口。第二部分的核心是确保这些系统调用正确地与 #:iVFS# 层交互，以执行文件操作。"
        },
        {
          "type": "text",
          "content": "#:b特定系统调用的实现#"
        },
        {
          "type": "list",
          "content": [
            "#:bopen#: 负责打开文件。这不仅涉及访问文件，还包括管理文件描述符。",
            "#:bread and write#: 这些用于分别从文件中读取和向文件写入。它们涉及缓冲区管理和处理文件偏移量。",
            "#:blseek#: 这个调用调整文件偏移量，对于在文件的特定位置读取或写入至关重要。",
            "#:bclose#: 用于关闭文件，确保资源被释放并且文件描述符可供重新使用。",
            "#:bdup2#: 它复制文件描述符，对于重定向输入/输出在进程管理中至关重要。"
          ]
        },
        {
          "type": "text",
          "content": "#:b内核级代码开发#"
        },
        {
          "type": "text",
          "content": "与通过系统调用与内核交互的用户级应用程序不同，你的任务涉及编写直接实现这些系统调用的内核级代码。这需要深入理解内核的内部机制、内存管理和错误处理策略。"
        },
        {
          "type": "title",
          "content": "#:a虚拟内存[https://github.com/EnmmmmOvO/UNSW-Computer-Science/tree/master/COMP3231/ass3]#"
        },
        {
          "type": "text",
          "content": "第三部分专注于增强 #:iOS/161# 操作系统的虚拟内存子系统，特别强调页表管理、虚拟内存转换和转换后援缓冲区 (#:iTLB#) 管理。关键方面包括"
        },
        {
          "type": "list",
          "content": [
            "#:b页表管理#: 实现散列页表 (#:iHPT#)，以有效管理用户程序的虚拟内存转换。这涉及处理地址转换和确保有效的内存访问。",
            "#:b虚拟内存转译#: 开发一个系统，用于将虚拟内存地址转换为物理地址，这对于有效的内存管理和 #:iOS# 的最佳性能至关重要。",
            "#:b转译后备缓冲器 (TLB) 管理#: 管理 #:iMIPS# 软件管理的 #:iTLB#，这是减少虚拟地址转换所需时间的关键组件。"
          ]
        }
      ],
      "repo": "https://github.com/EnmmmmOvO/UNSW-Computer-Science/tree/master/COMP3231",
      "imageSize": 90,
      "image": [
        "os161/logo.svg",
        "os161/1.png",
        "os161/2.png",
        "os161/3.png"
      ]
    }
  ],
  "portfolio": [
    {
      "logo": "astronomy.svg",
      "type": "天文学",
      "title": "奇妙的天体",
      "paper": "documents/APOD.pdf",
      "description": "这是一本面向对宇宙知识几乎没有或完全没有了解的读者的科普杂志。它的主要目的是介绍构成广阔宇宙的各种天体（星星、行星、卫星），讨论它们的类型、结构和可能的演变过程。内容中可能存在非专业的解释或不准确之处，欢迎提出更正或澄清。",
      "image": "galaxy.png"
    },
    {
      "logo": "computer.svg",
      "type": "计算机伦理",
      "title": "自动驾驶汽车中的伦理与效率平衡：功利主义视角",
      "paper": "documents/utilitarianism_and_autonomous_vehicles.pdf",
      "description": "本主题的主要论点是比较行为功利主义和规则功利主义如何以不同的方式影响自动驾驶汽车碰撞避免协议的发展，其中行为功利主义侧重于个别情境决策，而规则功利主义强调遵守预定的规则。",
      "image": "utilitarianism.png"
    },
    {
      "logo": "computer.svg",
      "type": "计算机伦理",
      "title": "人工智能在艺术创作中的伦理挑战",
      "paper": "documents/Drawing_AI.pdf",
      "description": "本文探讨了在自动驾驶汽车的碰撞避免协议中应用行为功利主义和规则功利主义的伦理考量，分析了每种方法对关键情境下决策的影响，并评估了它们对社会规范和自动驾驶技术设计的影响。",
      "image": "drawingAI.png"
    },
    {
      "logo": "go.svg",
      "type": "并发算法 (Go)",
      "title": "Suzuki-Kasami 并发算法",
      "video": "https://www.youtube.com/watch?v=pEkQOzhP_D4",
      "description": "本视频从学术角度深入分析了在分布式环境中基于令牌的 Suzuki-Kasami 并发算法的优点和不足，同时探讨了 Go 语言中基于通道的并发编程的优势。",
      "image": "go.png"
    },
    {
      "logo": "java.svg",
      "type": "并发算法 (Java)",
      "title": "数据集上实现并发操作",
      "paper": "documents/Java_Concurrency.pdf",
      "repo": "https://github.com/EnmmmmOvO/UNSW-Computer-Science/tree/master/COMP3151/23T2/ass1",
      "description": "本文主要利用读写锁作为主体，以确保在需要修改数据时只允许一个进程运行，如果没有写操作，允许多个进程读取数据。此外，使用信号确保数据结构的完整性。",
      "image": "javaConcurrency.png"
    },
    {
      "logo": "astronomy.svg",
      "type": "天文学",
      "title": "James Webb 天文望远镜",
      "paper": "documents/PHYS1160_Report_2.pdf",
      "repo": "https://github.com/EnmmmmOvO/UNSW-Computer-Science/tree/master/COMP3151/23T2/ass2",
      "description": "本文聚焦于哈勃望远镜的继任者詹姆斯·韦伯空间望远镜，包括其发射目的、结构、轨道以及发射原因。最后，更多关注于发射一年多后获得的成果及其对天文学的贡献。",
      "image": "webb.webp"
    },
    {
      "logo": "astronomy.svg",
      "type": "天文学",
      "title": "天文学的短篇报告",
      "paper": "documents/PHSY1160_Report_1.pdf",
      "description": "本文主要关注通过检查星系的结构特征以及寻找能够支持碳基生命形式的行星来探索发现外星生命的可能性。",
      "image": "astro.png"
    }
  ]
}