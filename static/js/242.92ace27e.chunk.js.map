{"version":3,"file":"static/js/242.92ace27e.chunk.js","mappings":"yOASA,MAgEA,EAhE8CA,IAAmB,IAAlB,SAAEC,GAAUD,EACzD,MAAOE,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAMC,IAAWF,EAAAA,EAAAA,WAAS,IAC1BG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KACxCK,EAAWC,IAAgBN,EAAAA,EAAAA,UAAS,IACrC,QAAEO,GAAYC,EAAAA,WAAiBC,EAAAA,GAI/BC,GAAcC,EAAAA,EAAAA,cAAY,KAC9BT,GAAQ,GACRI,EAAa,GACTH,GACFS,OAAOX,KAAKE,EAAa,SAC3B,GACC,CAACA,KAEJU,EAAAA,EAAAA,YAAU,KACR,IAAIC,EAQJ,OAPIb,GAAQI,GAAa,EACvBS,EAAQC,YAAW,KACjBT,EAAaD,EAAY,EAAE,GAC1B,MACqB,IAAfA,GACTK,IAEK,IAAMM,aAAaF,EAAM,GAC/B,CAACb,EAAMI,EAAWK,IAErB,MAAMO,GAAkBN,EAAAA,EAAAA,cAAaO,IACnCd,EAAec,GACfhB,GAAQ,EAAK,GACZ,IAEH,OACEiB,EAAAA,EAAAA,MAACC,EAAAA,EAAcC,SAAQ,CAACC,MAAO,CAAExB,WAAUmB,mBAAkBpB,SAAA,CAC1DA,GACD0B,EAAAA,EAAAA,KAACf,EAAAA,SAAc,CAAAX,UACbsB,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CACLvB,KAAMA,EACNwB,QAASf,EACT,kBAAgB,qBAChB,mBAAiB,2BAA0Bb,SAAA,EAE3C0B,EAAAA,EAAAA,KAACG,EAAAA,EAAW,CAACC,GAAG,qBAAoB9B,SACjCU,EAAQqB,aAEXT,EAAAA,EAAAA,MAACU,EAAAA,EAAa,CAAAhC,SAAA,EACZ0B,EAAAA,EAAAA,KAACO,EAAAA,EAAiB,CAACH,GAAG,2BAA2BI,GAAI,CAAEC,GAAI,EAAGC,GAAI,GAAIpC,SACnEU,EAAQ2B,eAEXX,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAACb,MAAOxB,EAAUsC,SA5Cbd,GAA+CvB,EAAYuB,EAAMe,OAAOC,WA4C/B,IAAE/B,EAAQgC,gBAEnEhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CAAA3C,UACZsB,EAAAA,EAAAA,MAACsB,EAAAA,EAAM,CAACC,QAAShC,EAAaiC,WAAS,EAAA9C,SAAA,CACpCU,EAAQqC,WAAW,KAAGvC,EAAU,gBAKlB,C,iCC9DtB,MAAMe,GAAgByB,E,QAAAA,eAAkC,CAC7D/C,UAAU,EACVmB,gBAAiBA,KACX6B,CAAyC,G","sources":["component/NoticeDialog/index.tsx","context/DialogContext.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\nimport { DialogContext } from '../../context/DialogContext';\nimport { LanguageContext } from '../../context/LanguageContext';\n\ninterface ChildrenProps {\n  children?: React.ReactNode;\n}\n\nconst NoticeDialog: React.FC<ChildrenProps> = ({ children }) => {\n  const [disabled, setDisabled] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [redirectUrl, setRedirectUrl] = useState('');\n  const [countdown, setCountdown] = useState(5);\n  const { content } = React.useContext(LanguageContext);\n\n  const handleCheckbox = (value: React.ChangeEvent<HTMLInputElement>) => setDisabled(value.target.checked)\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n    setCountdown(5);\n    if (redirectUrl) {\n      window.open(redirectUrl, '_blank');\n    }\n  }, [redirectUrl]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (open && countdown >= 0) {\n      timer = setTimeout(() => {\n        setCountdown(countdown - 1);\n      }, 1000);\n    } else if (countdown === -1) {\n      handleClose();\n    }\n    return () => clearTimeout(timer);\n  }, [open, countdown, handleClose]);\n\n  const handleClickOpen = useCallback((url: string) => {\n    setRedirectUrl(url);\n    setOpen(true);\n  }, []);\n\n  return (\n    <DialogContext.Provider value={{ disabled, handleClickOpen }}>\n      {children}\n      <React.Fragment>\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">\n            {content.jumpTitle}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\" sx={{ mt: 1, mb: 1 }}>\n              {content.jumpContent}\n            </DialogContentText>\n            <Checkbox value={disabled} onChange={handleCheckbox} /> {content.jumpDismiss}\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} autoFocus>\n              {content.jumpButton} ({countdown})\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    </DialogContext.Provider>\n  );\n}\n\nexport default NoticeDialog;","import { createContext } from 'react';\n\nexport interface DialogContextProps {\n  disabled?: boolean;\n  handleClickOpen: (url: string) => void;\n}\n\nexport const DialogContext = createContext<DialogContextProps>({\n  disabled: false,\n  handleClickOpen: () => {\n    if (process.env.NODE_ENV === 'development') {\n      console.warn('DialogContext is not defined');\n    }\n  },\n});"],"names":["_ref","children","disabled","setDisabled","useState","open","setOpen","redirectUrl","setRedirectUrl","countdown","setCountdown","content","React","LanguageContext","handleClose","useCallback","window","useEffect","timer","setTimeout","clearTimeout","handleClickOpen","url","_jsxs","DialogContext","Provider","value","_jsx","Dialog","onClose","DialogTitle","id","jumpTitle","DialogContent","DialogContentText","sx","mt","mb","jumpContent","Checkbox","onChange","target","checked","jumpDismiss","DialogActions","Button","onClick","autoFocus","jumpButton","createContext","process"],"sourceRoot":""}